Creating a trading strategy using Elliott Waves in combination with pivot lines involves multiple steps including market analysis, signal generation, risk management, and trade execution. Below is a detailed strategy that you can provide to another AI or developer to code a backtest.

### Elliott Wave Theory

The Elliott Wave Theory is a technical analysis tool that traders use to predict price movements by observing and identifying repeating patterns called waves.

1. **Identify the Wave Structure**: There are typically five waves in the direction of the main trend followed by three corrective waves (a 5-3 move). These are then further subdivided into a 5-3-5-3-5-3-5 structure.
2. **Determine the Wave Position**: Identifying the current position within the Elliott Wave structure is critical for predicting the future price movement.

### Pivot Lines

Pivot lines are technical indicators that use the high, low, and closing prices of the previous trading day to predict support and resistance levels.

1. **Calculate Pivot Points**: The classic formula for this is:
    - Pivot Point (P) = (High + Low + Close) / 3
    - Resistance Levels (R1, R2, R3...)
    - Support Levels (S1, S2, S3...)
2. **Adjusting for Timeframe**: Depending on the trading frequency, adjust the pivot line calculations accordingly (daily, weekly, monthly).

### Combined Strategy

The strategy will involve identifying the Elliott Wave patterns and using pivot lines for entry, stop loss, and take profit targets.

Here's a step-by-step outline for the trading strategy:

1. **Pre-Market Analysis**:
   - Identify the overall trend and current Elliott Wave position on a higher time frame (e.g., daily).
   - Calculate the pivot points for the trading session.

2. **Signal Generation**:
   - Entry Signal:
     - **Bullish Scenario**: A trade is considered when the price completes a corrective pattern and starts an impulsive wave near a pivot support level.
     - **Bearish Scenario**: A trade is considered when the price completes an impulsive wave and starts a corrective pattern near a pivot resistance level.

3. **Risk Management**:
   - **Stop Loss**: Place the stop loss below a recent swing low in a bullish scenario or above a recent swing high in a bearish scenario. Alternatively, stop losses can be placed around a pivot level that acts as further confirmation of trend reversal.
   - **Position Sizing**: Determine the size of the position according to predefined risk tolerance (e.g., 1-2% of trading capital on each trade).

4. **Trade Execution**:
   - **Entry**: Take the trade when the price action signals confirmation, such as breaking through a minor resistance/support in the direction of the trend.
   - **Take Profit**: Set the take profit target at the next pivot line that acts as resistance in bullish trends or support in bearish trends, or according to an Elliott Wave projection level.

5. **Trade Management**:
   - Adjust stop losses and take profit targets as the trade progresses, especially if new pivot points are established, or as the Elliott Wave pattern progresses.

6. **Post-Trade Analysis**:
   - Document the trade, including entry, exit, reason for the trade, trade management, and the outcome. Analyze the results to improve future strategies.

### Considerations for Backtesting:

- Historical Data: Ensure there's enough historical price and volume data for the asset being traded.
- Overfitting: Avoid overfitting the model to past data by keeping the strategy rules consistent and not overly complex.
- Slippage and Commissions: Incorporate realistic trading costs into the backtest.
- Market Conditions: Test the strategy in various market conditions to evaluate its robustness.

This outline provides a good starting point for coding a backtest. The actual code would require a programming environment that supports technical analysis, such as Python with libraries like pandas for data manipulation and TA-Lib for technical analysis indicators.